<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Lucrame:(一)环境搭建</title>
    <url>/2022/03/03/Lucrame-%E4%B8%80-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;Lucrame跨平台CAM应用框架基于Qt6.2.3进行搭建，使用qmake进行项目管理(目前已经在<code>macOS M1 Big Sur </code>和<code>Window10</code>平台进行测试)。基于QT插件系统框架，该应用框架也将采用插件模式进行开发（也可以直接在主框架中修改源码开发，建议采用插件方式开发，有利于模块划分和功能扩展）。<br>接下来详细介绍SDK包的环境搭建步骤。</p>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="Qt安装"><a href="#Qt安装" class="headerlink" title="Qt安装"></a>Qt安装</h3><p>&emsp;&emsp;<a href="https://www.qt.io/download">Qt官网进行下载</a>,注册一个自己的账号，点击如图所示进行Qt在线安装包下载。<br><img src="%E4%B8%8B%E8%BD%BDQt.jpg" alt="Qt下载"><br>&emsp;&emsp;Qt安装方式为在线安装，可能比较慢，耐心等待一下就好。后期修改版本或者增添新组件比较方便。<br>&emsp;&emsp;下载完成后打开Qt在线安装，按照如图所示，勾选红框处，其余保持默认。<br><img src="Qt%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE(Mac).png" alt="Qt安装(Mac)"><img src="Qt%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE(Win).png" alt="Qt安装(Win)"></p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="下载配置SDK开发包"><a href="#下载配置SDK开发包" class="headerlink" title="下载配置SDK开发包"></a>下载配置SDK开发包</h3><p>&emsp;&emsp;下载SDK包：<a href="https://gitee.com/lucaslyf/lucrame-sdk-mac.git">Mac版本</a>，<a href="https://gitee.com/lucaslyf/lucrame-sdk-win.git">Win版本</a>。</p>
<h3 id="主框架项目配置"><a href="#主框架项目配置" class="headerlink" title="主框架项目配置"></a>主框架项目配置</h3><p>&emsp;&emsp;1.下载解压后进入到<code>Lucrame-SDK/src/Lucrame</code>目录下，双击<code>Lucrame.pro</code>打开Qt工程，构建项目选择<code>[Mac]:Qt6.2.3 for macOS</code>，<code>[Win]:Qt6.2.3 MinGW</code>。<br>&emsp;&emsp;2.切换到<code>Build</code>下面的<code>Run</code>设置面板，在<code>Deployment</code>下，点击<code>Add Deploy Step</code>，选择<code>Make</code>,在<code>Make arguments</code>中输入<code>install</code>。在<code>Run</code>下，点击<code>Add</code>选择<code>Custom Executable</code>，点击<code>Create</code>，在<code>Executable</code>中，Win填入<code>D:\Lucrame\Lucrame.exe</code>，Mac填入<code>/Users/xxxx/Documents/Lucrame/Contents/MacOS/Lucrame</code>，自行替换为自己的项目路径。<br><img src="%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE-Run(Win).png" alt="项目配置(Win)"><br><img src="%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE-Run(Win,Mac).png" alt="项目配置(Win,Mac)"></p>
<blockquote>
<p><em><strong>[Mac额外步骤:]</strong></em><br>&emsp;&emsp;3.再次点击<code>Add Deploy Step</code>，选择<code>Custom Process Step</code>，<code>Command</code>中输入<code>/bin/cp</code>，<code>Arguments</code>中输入<code>-p Frame/Lucrame.app/Contents/MacOS/Lucrame ../../Contents/MacOS</code>。<br><font color=#008000>//Mac:将生成的Lucrame.app应用文件bundle文件结构中的Lucrame执行文件复制到外部bundle结构下，发布时只需要删除src文件夹，在项目文件夹Lucrame后添加.app后缀即可直接发布。Win:Windows平台无需该步骤，发布时直接删除src文件夹，将上级Lucrame文件夹打包发布即可。</font><br><img src="%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE-Run(Mac).png" alt="项目配置(Mac)"></p>
</blockquote>
<p>&emsp;&emsp;做完以上所有操作后，点击绿色小三角运行。<br><img src="%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C(Mac).png" alt="项目运行(Mac)"><img src="%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C(Win).png" alt="项目运行(Win)"></p>
<h3 id="插件项目配置"><a href="#插件项目配置" class="headerlink" title="插件项目配置"></a>插件项目配置</h3><p>&emsp;&emsp;1.进入到<code>Lucrame-SDK/src/Plugins</code>目录下，双击<code>Plugins.pro</code>打开Qt工程，构建项目选择<code>[Mac]:Qt6.2.3 for macOS</code>，<code>[Win]:Qt6.2.3 MinGW</code>。<br>&emsp;&emsp;2.项目构建后，点击<code>项目(Projects)</code>小扳手图标，选择<code>Build</code>，在<code>Build Steps</code>下展开<code>Make</code>,在<code>Make arguments</code>中输入<code>install</code>。<br><img src="Plugins%E9%85%8D%E7%BD%AE.png" alt="Plugins项目配置"></p>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><p>&emsp;&emsp;1.先安装Qt再配置SDK开发包，不然会出现找不到Qt Plugin的情况。<br>&emsp;&emsp;2.Mac:初次运行时在<code>Lucrame-SDK/Contents/MacOS</code>文件夹下没有Lucrame文件，在电脑中随便找一个app，<code>右键-Show Package Contents-Contents-MacOS</code>进入该目录，将里面的可执行文件复制到<code>Lucrame-SDK/Contents/MacOS</code>目录下，修改名字为<code>Lucrame</code>，重新构建，运行即可。</p>
]]></content>
      <categories>
        <category>Lucrame跨平台CAM应用框架</category>
      </categories>
  </entry>
  <entry>
    <title>Lucrame:(二)项目结构</title>
    <url>/2022/03/04/Lucrame-%E4%BA%8C-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4240a1fb42c58d22c75851e732c032fdf6f2d02aa4f9eb9799e3bc885bce7635">f85aab0133061e7f96c9eb41b3da4cd8f5d7361cb24fbb47ac18431dc75d9d6965e236b066f681e007ca2cf0dfdf7eac51bcb8a23ac6c2018503dd4e71cbdd418235b6b9c3b0b79b4cb2ddefe721955b1ae37351b9bf4f82f93603227f6e02963663fb69c68d7b0a7b94e441b627d2f2f4a64fb00f1fd9b3de7fb686b4f9312c0742d555272d7857742df829dcd259a151b720f1e58ce3e80723324476e77c02a4a7c3b1ba3f3e4e06426befbc828ff4ac219b260af78a64ce13f3880f6c032a962d12955b0a94798036741edae1a9d2989268668fcaf4417f03bfdf3a54b278032d7088255eeed16fc58a3b91a31a66e997432fb3c98938bcf365a462eed7a4f0ac9de72223b16325e4dfc3a044683710f9dddc61471fdf7bdc9ed1df25a0f89abbbfbaf315dc99b26ca2c07ab12562e668db792fdb2ff7dc3c239643ffaee904c68ae71f1a2c6c64f3221adcfd5dc8d554d278b8557b420ab915c59cdebb389656e2efa096ded92d75e57a5341f090deabe63858cf320ee0fc752c7ebe48f5ad0b69a869e6bdd1c4fe810e3eeef09c9ed92ccf3043b94c38e37d1d8bfcc9c8097c9ff85e3b20bf4c8853602417243367f0e41404442739ed697b1c2457c99280dff234fea7d157c135071fd79409557ebb1c339ca66316b8ea9da00ea8251245328f3aa8094e628ec20c02c02993a4ff7e373ff0cdffe887d9ee65608db3874b84e1ff239a6324769cf1dff1f4c8291de065a768b743ea750b06bff7fa13dff52a5bf703b3c300e3f69e75cc98d1e0e5063c2750275b281b388a6852c36a3305319f7adeec0fb6494fde1cef756ec8213469eeec65a2b3c0e5117e96ab41c6fb05f367d7a0703b9ed9f695558ab59e18711a49698f1cfa5609f2ce955b43d19cdc1a7886c1a3adbc4f9bd1e736461d4222adf588d16bf5162504a282563c1cbca823494ae5f2d1dda90f9879c53550f7210e67ac0dbb659463ab9ccd252919eaf2746ecf483013fa0dca14682c6cfd1e8dbbb03ef80b80d3daac973f88e6699e57728877dc735a01feef4e13628ad0fb81ae17a256100204ddc6e669933a4cbdb578c439d79ed6811060b3504bff42b8282b6ce0d4341e2b7880116bdb2ede4deb402b48f255d7cee683762a4ee1286f2395ecd386da9cd47a2bf9225ab06186c8d416037f24170ecbcd4c66e65368680176a09ebcf4664011da4d7133525ccdaf1334b3baaa9e8622c379546ec9d238aacdeeb88a2ba1f6c8245a6f13f889b226e220e6621e47ef633f8890de7734aa8d0a9aad674d0aac0666b88f1eda153e0a385447c7c02f94ec439b9370eebe9a41cdcc0f5a6554e3a46216e3e15305c9bad0219ebd6ec30e267d660959ca5bec725a2baac766f1c49dfe56aa7a8c06222fab2f585ae9b542bd9242c70adcef74d8a95e59767209942f61f848bd94b84ddf1beb69d16a1e02864f3281789cec32922f2bc8790f5939db198f46fc69871a88e16dba366b05a020fd2da1da7523eb543844d0b5c583cd5ca1ba02cb50d431c34cea1c6883d2538b9eca1ab62ae971efed3c08ee36682d14f0c369af19a195954af50f49f45f0ee2853ffd46278d258a406c4217c2ff6eb7427d10754a6684dfbe74ebd72e4f7e6aafd953804b7d3891343674e48fca7d3a06a57898a44aa3030c8bfb263f86146c50e1826a4419494cc0257206413bc7664bfc13f9c6bb65588e5e3389f4e4966a3cac05e78b00c80872d4b0d620d9b194adda00f970c142a1124db8536c52ad566587f51af562d844eb240ab81fb94b2b1e4e1a664b398fda4bb7de65d93a05b3ac3cdfe1ac437f299e8119494dcdff4155ca3dd481127312c0f2ac58483e2f9f7ed856a7da44bd9d9f255b1abd3a632a6a2f1629abaa9f6bd542d9aa66fe1376f78357f1c2d7f2e776a4aa55de1d528729464d2734b2dd4c28b891ae30ac67ed03d9f63517bfe675f33b3137a0033cdf284758516427a68e577252712454b93d499606799b4794e99ea3b2ded6556d8219ea9f1c0bd710d24f55fef80a918a8ca519c1740734cd6f444a95f78e553c0af4c135538b4af1293d782faf0eb7ac241f59b7e37cd9619c9e4c6075d4a8afff1ccf2f0a9fd1a295affbd0bd106e441faaa8307371fc1c131168438db185c04412d034ef5ed5257f14694f6f5e2500e73a07d28775732d77a0fc85fd31b45e0aae2df15616c8f861e6ee5a7816ca875a8df15b121cd4f12244fd1b504a683691dcb7e8af458bddc2694249925dfa86cd54c202955a7b782fddf0689d4530c674abc010a80e39304807ef5451c916f6e6278d3741f16161e4fb0acb593d0a928be972deaa9cc244e17eae17a6ce43dea967b6a307569663cd6bf5fce8d505d6dbca216f42b8eaa1c4d7442fe32404c09fe033c582c9c80150b831a901ab1eb5643c7ce5aa69e02441e4e1391b17bee088047920326c68dc94603210588850557c2708477804c67f5b02a4ff3e9c0bcf07aa7b8a2774391050c705cd1b2f17f17ebda82f16a5356182da13587bc0c80bfac3aff10db50c19114bd7e18b31b1eb04f0f727c14f9662d2923eb41dd9fb55d65c68bbf220d055b7ab8daf390601bf939a9286d9febcd16a5872413df4fc5ad904f101a8c3c1bca0b202024eeb94e3207b6a5722bcfaed19a1f3504e5946f1038b140b04d52b242c9f66e913bb7dde465273485c0d7bd73979cd1255493cf8939a72125fd07537751f6bd0201b12ce1df56ca31ae30c177f2774a3b3340af6acd4278b4be9ae72dbb0adfea1fe4e126de751c8df2e45176c3e2870ac0eb88acd1e7ecf4340942409c9a621fb4adab30f9d8b2d7b0dacd460ba9bad6971b22d4bb7bf4a3df338cb6ee96e73be920033cf109e9d86d851b6a11a701f6ddb93ca45fb39c6338872069ef23cec0767ed5e45873f15b92e5139169da92b9afeb023c7ef87e76478599b81abe7303c388c65e1e8b50ee145df000ea7bb5d80c698d162262852dc4001ca0956ccf5823385e5ac015a72d4200a600782a9dd16671beb25d0626fb99e31d4026266b3e23446e98ce5e6aee065e540712cb735cad9fc56124b0f465a6aedf01971e2657ac8aa4a1fb5f7e6365f9a6e49a15e945bd7ac6d85237c3070fbafa692ef9efe97d20290476cfc1f93e923ef85262710cd2105421ceb1f15cbd06e5b5a19cd8c61c0320438999783b404d5c3f250fa5f64ca96fb6b62f87a3462d8d77f87a909055bfc27b3b2e288c7da33f0dc7634df503e3333cf612261f3ba73182cc5702052c2aaf71b78eabe9754ea91efcc7799be496f06f0f85f3bd01ac2b54d82b2c3a1137d661c198414b957d975fa96c5cbbd10910428be87a71a532349893a07ee4fb8ddc62e7a2f9bd7df6a5b9593cee71e6ccb94f1f2f0eed044a4bdfe299f135c865d633d5d7e24a74c6039b8f4b6f3f9fd3504c8c522bf857e7be6becb5b67a24aa07c815ac03d24b2447890fe38f4435dc171afcf4658b72533b66417a2091b1bdf6b3738379cf25985e4122ba70abd64201148b57f2dc56f72f2a989eb3e6dc6d306cd9514a34d4f274795085a9e90941ebe0042e7a7a89f161171219dfbde54a51e1a0771d4e30b82c2548021fdf0ec0ea45e837b52e6396095dc83915398a980ca5534e6514952520faf2b8aab3e489575eab6d7d033aafc32991a33369d8b3625895cf49b7a90ca6c47b90f92b70930be60ca342b9df3add4867adb67e9e6b25fce48f70fc5503c097e30604bb5a0ee5fd54a85270e455dede3cf01a22c8a7059e7497732554c02801b1eede62a251f5d2c6c9c092a0a542bf670ef65c8c0853679f2d6e06e1f7de6a22a3ba9873f628da2e73fb0a4ecd1297910221ef22a814477e63f097b6af9b83a8fac164684ea227ecdf830d84ed5a4820eed324d2b71c36ffaf4ef22e605e00cfa60b3b848b94e82977f826a78a01bb123f6ad3a3b21fae6dc01a500d8597f778a1512b5bf1c433653bd9dc4457c1045fc8e4bcb0f4b1dc065f66f35dd7034ea95932f828cd615f340c5c65028ff0cd3ddced26a1b623edf22df3489f3399de6b2c22e8d311fb9871abe562288abc4e36485b640af4a76a858c77b096d6fce2060c928d4a440f093472a5cfb1a0762fba92286e9b3597277b32776323c8a06ef1e0f75c16f8b14d076b06c3e3971b7c5943d11e57cb24116eef35d131ed51f4113e162d38135d684f7b70ca7b96b39c3edfed74148c20492fe9fff7499d56946678b599ca235cba7ba0381ae118f5b34f9eab16e140d007eeac60979562c5bbdba06dc07fa760a8f933f36f9fe21d454b6d322b3c9c413fbb43088d5773d4d892160b285d85dea494d507d858df4980d88cc77ef288d3ff2b2666434e106b7e5282a80c3df1479c970f0f4ddb99bac300d8550d7d83ee77da55ae78c6404a8beda92051b0a03f3ab21ed317677480023a07faa2c3f9a574ec1fae181e3b54ef42bc11b446840550e36fd0c0bd48fb377bab9165c0681d16a48037deae7275f289d25064b8e1c68917397e9070a71635fd2b60b50bd2a33a0b007a37d886142405c7383d7d06fa78c960684deb6c2b2a8769e9d84d0eae57ee00e75f20176df572779f1f2355fc04176e8541d5e76870b64c3c3fdc5d6f1df7862a0c3e50918bbeed5202dd804927393cd2c9fbb6ffcf2711eda8cdccbec171f4d79c8f5f7456f141339e903c0129371826a920bdb6f3c5a86eb4e492a49735e0bc88c73f47e6a4fa3573981b9bccf2bc6a0a3e5010d2572d9e8a3f0ed2e018fd682760bd4ae3f5622abfb93c2106c456c86195bd743fee4938cdb4e34279939dd7c6b443d081276267ae8c7b0ec12b7bacea541b896881a08f11e31a20802bcf3d1513db1f28fad8f798380e8004cd51c52fbbebc6d361bede3ac2bc13e6b6712d9d815a8297893c2fe9aa2f84ac3b1886e2f6617aa90b35361aacf4ccd6631754b6b9355781680f19e09874ff2a9f79f354a3578389ec24080205939db44b1b8ff04ceab9dcf71c694a038b261e69ef002a62b57b0207883779b499c1b5f6ec7c99845e59cc001f94284b08982b52a2b89cbfc637a5e71dc3478a6b9839ca0e638ae1738b504009aaf523bc4ea1a6b845f409679bd707ffb518eb917a25a343fbf265f30a54237f3abc5ccd589c75b202c16ca021934e615a58bde6a237915cbd096c7b05c037a6620c3ffe5f621aeb090959dd826225a982b7498b05af260498b9cf2fc0ff38a47963fe4ef2acc3bbafce265fdf4068ec08ebefffd1db1cb327989f98efa67f3a77ead1e518d32ecc4c69cb63a6a439d2fcc47ee7aa46ebed19b9107a41121f739eeabb546fa56fc66f6c66d3cfbc27e1152eb44c0666f8881f94421706a92e20a81bf3a1188b30ef4cc1066e2b66a30f1b87758b8a8ae1b4ee5ccddb4</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Lucrame跨平台CAM应用框架</category>
      </categories>
  </entry>
  <entry>
    <title>Lucrame:问题记录</title>
    <url>/2022/03/06/Lucrame-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;此贴主要记录Lucrame跨平台应用框架开发过程中遇到的奇怪和难点问题。</p>
<h2 id="Mac平台-Lucram在QtCreator中Debug闪退"><a href="#Mac平台-Lucram在QtCreator中Debug闪退" class="headerlink" title="(Mac平台)Lucram在QtCreator中Debug闪退"></a>(Mac平台)Lucram在QtCreator中Debug闪退</h2><p>&emsp;&emsp;因为项目设置了文件结构，会将生成目录下所需文件复制到指定目录。如果先直接运行，会在指定目录生成Lucrame可执行文件。此时再进行Debug，Qt检测到指定目录下存在同名文件，不会直接替换，而选择直接对其Debug，但运行生成的可执行文件和Debug生成的可执行文件有差异，因此无法Debug，导致直接闪退。此时只需要将指定目录下运行生成的Lucrame可执行文件删除，再进行Debug操作即可。</p>
]]></content>
      <categories>
        <category>Lucrame跨平台CAM应用框架</category>
      </categories>
  </entry>
  <entry>
    <title>RobotCAM:(三)基于QT的桌面软件开发通用平台基本代码介绍</title>
    <url>/2021/08/03/Plugins-%E4%B8%89-%E5%9F%BA%E4%BA%8EQT%E7%9A%84%E6%A1%8C%E9%9D%A2%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E9%80%9A%E7%94%A8%E5%B9%B3%E5%8F%B0%E5%9F%BA%E6%9C%AC%E4%BB%A3%E7%A0%81%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;通用平台框架基于QT编写（LGPL开源协议，商业友好型，独立封装只需开源QT模块代码），使用C++语言，可视化部分使用VTK开源库（BSD开源协议，商业友好型，不修改源码无需开源）。<br>&emsp;&emsp;整个项目使用CMake进行模块化管理（CMake相比于QMake更加通用），动态加载模块（插件）。</p>
<h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F;包含主窗口头文件
#include &quot;mainwindow.h&quot;
#include &lt;QApplication&gt;
int main(int argc, char *argv[])
&#123;
    &#x2F;&#x2F;初始化资源文件
    Q_INIT_RESOURCE(Public);
    QApplication app(argc, argv);
    &#x2F;&#x2F;创建一个主窗口对象
    MainWindow w;
    &#x2F;&#x2F;调用主窗口对象的初始化函数
    w.initMainWindow();
    &#x2F;&#x2F;显示主窗口
    w.show();
    return app.exec();
&#125;
</code></pre>

<h3 id="mainwindow-h"><a href="#mainwindow-h" class="headerlink" title="mainwindow.h"></a>mainwindow.h</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F;避免重复包含头文件
#ifndef MAINWINDOW_H
#define MAINWINDOW_H
#include &lt;QMainWindow&gt;
#include &lt;QtWidgets&gt;
#include &lt;QtGui&gt;
QT_BEGIN_NAMESPACE
namespace Ui &#123; class MainWindow; &#125;
QT_END_NAMESPACE
class MainWindow : public QMainWindow
&#123;
    Q_OBJECT
public:
    &#x2F;&#x2F;构造函数，指定父对象
    MainWindow(QWidget *parent &#x3D; nullptr);
    &#x2F;&#x2F;析构函数
    ~MainWindow();
    &#x2F;&#x2F;初始化主窗口
    bool initMainWindow();
private:
    Ui::MainWindow *ui;
    &#x2F;&#x2F;重写大小变化事件
    void resizeEvent(QResizeEvent * event);
    &#x2F;&#x2F;初始化VTK显示
    bool initVTKWidget();
&#125;;
#endif &#x2F;&#x2F; MAINWINDOW_H
</code></pre>

<h2 id="mainwindow-cpp"><a href="#mainwindow-cpp" class="headerlink" title="mainwindow.cpp"></a>mainwindow.cpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &quot;mainwindow.h&quot;
#include &quot;.&#x2F;ui_mainwindow.h&quot;
#include &quot;evaDisplayInterface.h&quot;
#include &lt;vtkRenderWindow.h&gt;
#include &lt;vtkRenderWindowInteractor.h&gt;
#include &lt;vtkInteractorObserver.h&gt;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
&#123;
    ui-&gt;setupUi(this);
&#125;

MainWindow::~MainWindow()
&#123;
    delete ui;
&#125;

bool MainWindow::initMainWindow()
&#123;
    &#x2F;&#x2F;初始化主窗体，修正各控件尺寸大小
    this-&gt;setAttribute(Qt::WA_DontShowOnScreen);
    this-&gt;show();
    this-&gt;hide();
    this-&gt;setAttribute(Qt::WA_DontShowOnScreen, false);
    &#x2F;&#x2F;这一段代码是为了刷新控件尺寸
    this-&gt;setWindowTitle(&quot;RobotCAM&quot;);
    this-&gt;setWindowIcon(QIcon(&quot;:&#x2F;images&#x2F;RobotCAM.png&quot;));
    initVTKWidget();
    return true;
&#125;

bool MainWindow::initVTKWidget()
&#123;
    evaDisplayInterface displayInterface;
    double mainWinRect[2];
    mainWinRect[0] &#x3D;ui-&gt;widget-&gt;rect().right();
    mainWinRect[1] &#x3D;ui-&gt;widget-&gt;rect().bottom();
    &#x2F;&#x2F;绑定窗口
    displayInterface.InitializeVTKWindow(mainWinRect, (HWND)ui-&gt;widget-&gt;winId());
    return true;
&#125;

void MainWindow::resizeEvent(QResizeEvent * event)
&#123;
    QWidget::resizeEvent(event);
    if( ui-&gt;widget-&gt;rect().height()&gt;50)
    &#123;
        &#x2F;&#x2F;获取VTK窗口对应的QTWidget控件大小
        double mainWinRect[2];
        mainWinRect[0] &#x3D;ui-&gt;widget-&gt;rect().right();
        mainWinRect[1] &#x3D;ui-&gt;widget-&gt;rect().bottom();
        evaDisplayInterface displayInterface;
        displayInterface.AdjustWinDisplay(mainWinRect);
        displayInterface.AdjustParameterDisplay();
    &#125;
&#125;
</code></pre>]]></content>
      <categories>
        <category>RobotCAM软件开发</category>
      </categories>
  </entry>
  <entry>
    <title>RobotCAM:(四)基于VTK的桌面软件显示模块代码介绍</title>
    <url>/2021/11/04/Plugins-%E5%9B%9B-%E5%9F%BA%E4%BA%8EVTK%E7%9A%84%E6%A1%8C%E9%9D%A2%E8%BD%AF%E4%BB%B6%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%9D%97%E4%BB%A3%E7%A0%81%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;因为RobotCAM软件平台是面向机器人仿真加工和CAM方向的桌面应用软件平台。因此需要用到大量三维显示，平台选用VTK显示库（BSD开源协议），本章节主要介绍VTK显示模块的基本代码。</p>
<h3 id="pcbDisplayInterface-h"><a href="#pcbDisplayInterface-h" class="headerlink" title="pcbDisplayInterface.h"></a>pcbDisplayInterface.h</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#pragma once
#include &lt;windows.h&gt;
class vtkRenderWindow;
class vtkRenderer;
class vtkRenderWindowInteractor;
class vtkPlaneSource;
class vtkActor;
class vtkTextActor;
class vtkOrientationMarkerWidget;
class pbcDisplayInterface
&#123;
public:
    &#x2F;&#x2F;静态成员变量：VTK渲染窗口
    static vtkRenderWindow *s_RenWin;
    &#x2F;&#x2F;静态成员变量：2D视窗渲染器
    static vtkRenderer *s_Renderer2D;
    &#x2F;&#x2F;静态成员变量：3D视窗渲染器
    static vtkRenderer *s_Renderer3D;
    &#x2F;&#x2F;静态成员变量：
    static double s_ViewPort[4];
    static int s_BGGradient;
    static double s_BGColor[6];
    static vtkActor *s_FloorActor;
    &#x2F;&#x2F;初始化VTK窗口，将VTK窗口绑定到对应的QT控件（传入窗口大小和窗口句柄）
    bool InitializeVTKWindow(double* rectClient, HWND viewHwnd);
    &#x2F;&#x2F;调整显示参数（三角面数量）
    bool AdjustParameterDisplay();
    &#x2F;&#x2F;调整窗口大小
    void AdjustWinDisplay(double* rectClient);
private:
    static vtkRenderWindowInteractor *s_RenInter;
    static vtkPlaneSource *s_GroundSource;
    static vtkTextActor *s_PolyNumber;
    static vtkOrientationMarkerWidget *s_AxisWidget;
    &#x2F;&#x2F;读取用户设置
    bool ReadUserSettings();
    &#x2F;&#x2F;初始化交互风格
    bool InitializeInteractionStyle();
    &#x2F;&#x2F;初始化显示环境
    bool InitializeEnvironment();
    &#x2F;&#x2F;初始化参数显示
    bool InitializeParameterDisplay();
    &#x2F;&#x2F;初始化坐标轴显示
    bool InitializeAxisDisplay();
&#125;;
</code></pre>

<h3 id="pcbDisplayInterface-cpp"><a href="#pcbDisplayInterface-cpp" class="headerlink" title="pcbDisplayInterface.cpp"></a>pcbDisplayInterface.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &quot;pbcDisplayInterface.h&quot;
#include &lt;vtkRenderWindow.h&gt;
#include &lt;vtkRenderer.h&gt;
#include &lt;vtkRenderWindowInteractor.h&gt;
#include &lt;vtkInteractorStyleTrackballCamera.h&gt;
#include &lt;vtkSmartPointer.h&gt;
#include &lt;vtkPlaneSource.h&gt;
#include &lt;vtkPolyDataMapper.h&gt;
#include &lt;vtkActor.h&gt;
#include &lt;vtkProperty.h&gt;
#include &lt;vtkTextActor.h&gt;
#include &lt;vtkTextProperty.h&gt;
#include &lt;vtkAxesActor.h&gt;
#include &lt;vtkCaptionActor2D.h&gt;
#include &lt;vtkOrientationMarkerWidget.h&gt;
vtkRenderWindow *evaDisplayInterface::s_RenWin&#x3D; vtkRenderWindow::New();
vtkRenderer *evaDisplayInterface::s_Renderer3D &#x3D; vtkRenderer::New();
vtkRenderer *evaDisplayInterface::s_Renderer2D &#x3D; vtkRenderer::New();
vtkRenderWindowInteractor *evaDisplayInterface::s_RenInter &#x3D; vtkRenderWindowInteractor::New();
vtkPlaneSource *evaDisplayInterface::s_GroundSource &#x3D; vtkPlaneSource::New();
vtkActor *evaDisplayInterface::s_FloorActor &#x3D; vtkActor::New();
vtkTextActor *evaDisplayInterface::s_PolyNumber &#x3D; vtkTextActor::New();
vtkOrientationMarkerWidget *evaDisplayInterface::s_AxisWidget &#x3D; vtkOrientationMarkerWidget::New();
int pbcDisplayInterface::s_BGGradient;
double pbcDisplayInterface::s_BGColor[6];
double pbcDisplayInterface::s_ViewPort[4];
bool pbcDisplayInterface::InitializeVTKWindow(double* rectClient, HWND viewHwnd)
&#123;
    s_RenWin-&gt;SetSize(rectClient[0], rectClient[1]);
    s_RenWin-&gt;SetParentId(viewHwnd);
    s_RenWin-&gt;SetNumberOfLayers(2);
    ReadUserSettings();
    s_Renderer3D-&gt;SetLayer(0);
    s_Renderer2D-&gt;SetLayer(1);
    s_ViewPort[0]&#x3D;0;
    s_ViewPort[1]&#x3D;0.5;
    s_ViewPort[2]&#x3D;0.5;
    s_ViewPort[3]&#x3D;1;
    s_Renderer2D-&gt;SetViewport(s_ViewPort);
    s_RenWin-&gt;AddRenderer(s_Renderer3D);
    s_RenWin-&gt;AddRenderer(s_Renderer2D);
    s_RenInter-&gt;SetRenderWindow(s_RenWin);
    if(!InitializeInteractionStyle()||!InitializeEnvironment()||!InitializeAxisDisplay()||!InitializeParameterDisplay())
    &#123;
        return false;
    &#125;
    s_Renderer3D-&gt;ResetCamera();
    s_Renderer3D-&gt;ResetCameraClippingRange();
    s_RenWin-&gt;Render();
    s_RenInter-&gt;Initialize();
    s_RenInter-&gt;Render();
    return true;
&#125;
bool pbcDisplayInterface::InitializeInteractionStyle()
&#123;
    vtkSmartPointer&lt;vtkInteractorStyleTrackballCamera&gt; defaultInteractorStyle &#x3D;
        vtkSmartPointer&lt;vtkInteractorStyleTrackballCamera&gt;::New();
    defaultInteractorStyle-&gt;SetDefaultRenderer(s_Renderer3D);
    s_RenInter-&gt;SetInteractorStyle(defaultInteractorStyle);
    return s_RenInter-&gt;GetInteractorStyle();
&#125;
bool pbcDisplayInterface::InitializeEnvironment()
&#123;
    &#x2F;&#x2F;初始化地面
    int rlt &#x3D; 4; &#x2F;&#x2F; x,y方向上的方格数量
    int sqrLen &#x3D; 1000; &#x2F;&#x2F; 方格的边长
    s_GroundSource-&gt;SetOrigin(0, 0, 0);
    s_GroundSource-&gt;SetPoint1(rlt*sqrLen, 0, 0);
    s_GroundSource-&gt;SetPoint2(0, rlt*sqrLen, 0);
    s_GroundSource-&gt;SetResolution(rlt, rlt);
    s_GroundSource-&gt;SetCenter(0.0, 0.0, 0.0);
    s_GroundSource-&gt;Update();
    vtkSmartPointer&lt;vtkPolyDataMapper&gt; floorPolyDataMapper &#x3D; vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();
    floorPolyDataMapper-&gt;SetInputData(s_GroundSource-&gt;GetOutput());
    s_FloorActor-&gt;SetMapper(floorPolyDataMapper);
    s_FloorActor-&gt;GetProperty()-&gt;SetEdgeVisibility(1);
    s_FloorActor-&gt;GetProperty()-&gt;SetEdgeColor(0, 0, 0);
    s_FloorActor-&gt;GetProperty()-&gt;SetLineWidth(2);
    s_FloorActor-&gt;GetProperty()-&gt;SetLighting(false);
    s_FloorActor-&gt;PickableOff();
    s_Renderer3D-&gt;AddActor(s_FloorActor);
    return s_Renderer3D-&gt;GetActors();
&#125;
bool pbcDisplayInterface::InitializeParameterDisplay()
&#123;
    double size[2];
    s_PolyNumber-&gt;SetInput(&quot;0&quot;);
    s_Renderer3D-&gt;AddActor(s_PolyNumber);
    s_PolyNumber-&gt;GetSize(s_Renderer3D, size);
    int *winSize &#x3D; s_RenWin-&gt;GetSize();
    if(winSize&#x3D;&#x3D;NULL)
    &#123;
        return false;
    &#125;
    s_PolyNumber-&gt;SetDisplayPosition(winSize[0] - size[0] &#x2F; 2 - 10, winSize[1] - size[1] - 10);
    s_PolyNumber-&gt;GetActualPosition2Coordinate()-&gt;SetCoordinateSystemToNormalizedViewport();
    s_PolyNumber-&gt;GetTextProperty()-&gt;SetFontSize(15);
    s_PolyNumber-&gt;GetTextProperty()-&gt;SetFontFamilyToArial();
    s_PolyNumber-&gt;GetTextProperty()-&gt;SetJustificationToCentered();
    s_PolyNumber-&gt;GetTextProperty()-&gt;BoldOn();
    s_PolyNumber-&gt;GetTextProperty()-&gt;ItalicOn();
    s_PolyNumber-&gt;GetTextProperty()-&gt;SetColor(0, 0, 0);
    return true;
&#125;
bool pbcDisplayInterface::InitializeAxisDisplay()
&#123;
    vtkSmartPointer&lt;vtkAxesActor&gt; axisActor &#x3D; vtkSmartPointer&lt;vtkAxesActor&gt;::New();
    axisActor-&gt;GetXAxisCaptionActor2D()-&gt;GetCaptionTextProperty()-&gt;SetColor(1, 0, 0);&#x2F;&#x2F;修改X字体颜色为红色
    axisActor-&gt;GetYAxisCaptionActor2D()-&gt;GetCaptionTextProperty()-&gt;SetColor(0, 1, 0);&#x2F;&#x2F;修改Y字体颜色为绿色
    axisActor-&gt;GetZAxisCaptionActor2D()-&gt;GetCaptionTextProperty()-&gt;SetColor(0, 0, 1);&#x2F;&#x2F;修改Z字体颜色为蓝色
    axisActor-&gt;SetShaftTypeToCylinder();
    axisActor-&gt;SetTipTypeToCone();
    axisActor-&gt;SetCylinderRadius(1.5 * axisActor-&gt;GetCylinderRadius());
    axisActor-&gt;SetConeRadius(1.5 * axisActor-&gt;GetConeRadius());
    axisActor-&gt;SetSphereRadius(1.5 * axisActor-&gt;GetSphereRadius());
    axisActor-&gt;GetXAxisCaptionActor2D()-&gt;GetCaptionTextProperty()-&gt;ShadowOff();
    axisActor-&gt;GetYAxisCaptionActor2D()-&gt;GetCaptionTextProperty()-&gt;ShadowOff();
    axisActor-&gt;GetZAxisCaptionActor2D()-&gt;GetCaptionTextProperty()-&gt;ShadowOff();
    s_AxisWidget-&gt;SetOutlineColor(0.9300, 0.5700, 0.1300);
    s_AxisWidget-&gt;SetOrientationMarker(axisActor);
    s_AxisWidget-&gt;SetInteractor(s_RenInter);
    s_AxisWidget-&gt;SetViewport(0.0, 0.0, 0.07, 0.1);
    s_AxisWidget-&gt;SetEnabled(1);
    s_AxisWidget-&gt;InteractiveOff();
    return s_AxisWidget-&gt;GetOrientationMarker();
&#125;
bool pbcDisplayInterface::ReadUserSettings()
&#123;
    &#x2F;&#x2F;读取用户背景颜色设置
    ifstream BackgroundSetting;
    BackgroundSetting.open(&quot;..\\..\\.\\UserData\\DisplaySettings\\UserBackgroundSetting.txt&quot;);
    if (!BackgroundSetting.is_open())
    &#123;
        cout &lt;&lt; &quot;DefaultSettings is damaged&quot; &lt;&lt; endl;
        return false;
    &#125;
    for (int i &#x3D; 0; i &lt; 1; i++)
    &#123;
        BackgroundSetting &gt;&gt; s_BGGradient;
    &#125;
    for (int i &#x3D; 0; i &lt; 6; i++)
    &#123;
        BackgroundSetting &gt;&gt; s_BGColor[i];
    &#125;
    s_Renderer2D-&gt;SetBackground(s_BGColor[0] &#x2F; 255.0, s_BGColor[1] &#x2F; 255.0, s_BGColor[2] &#x2F; 255.0);
    s_Renderer2D-&gt;SetBackground2(s_BGColor[3] &#x2F; 255.0, s_BGColor[4] &#x2F; 255.0, s_BGColor[5] &#x2F; 255.0);
    s_Renderer2D-&gt;SetGradientBackground(s_BGGradient);
    s_Renderer3D-&gt;SetBackground(s_BGColor[0] &#x2F; 255.0, s_BGColor[1] &#x2F; 255.0, s_BGColor[2] &#x2F; 255.0);
    s_Renderer3D-&gt;SetBackground2(s_BGColor[3] &#x2F; 255.0, s_BGColor[4] &#x2F; 255.0, s_BGColor[5] &#x2F; 255.0);
    s_Renderer3D-&gt;SetGradientBackground(s_BGGradient);
    s_RenWin-&gt;Render();
    return true;
&#125;
void pbcDisplayInterface::AdjustWinDisplay(double* rectClient)
&#123;
    s_RenWin-&gt;SetSize(rectClient[0], rectClient[1]);
&#125;
bool pbcDisplayInterface::AdjustParameterDisplay()
&#123;
    double size[2];
    s_PolyNumber-&gt;GetSize(s_Renderer3D, size);
    int *winSize &#x3D; s_RenWin-&gt;GetSize();
    if(winSize&#x3D;&#x3D;NULL)
    &#123;
        return false;
    &#125;
    s_PolyNumber-&gt;SetDisplayPosition(winSize[0] - size[0] &#x2F; 2 - 10, winSize[1] - size[1] - 10);
    return true;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>RobotCAM软件开发</category>
      </categories>
  </entry>
  <entry>
    <title>RobotCAM:问题记录</title>
    <url>/2021/07/31/Plugins-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;此贴主要记录RobotCAM软件开发过程中遇到的奇怪和难点问题。</p>
<h2 id="QtCreator-Debug模式下加载QFileDialog十分缓慢"><a href="#QtCreator-Debug模式下加载QFileDialog十分缓慢" class="headerlink" title="QtCreator Debug模式下加载QFileDialog十分缓慢"></a>QtCreator Debug模式下加载QFileDialog十分缓慢</h2><p>&emsp;&emsp;排查后发现程序没有问题、环境配置没有问题。重装VS和QT后还是无效。怀疑是注册表清理出问题，查看注册表基本确定问题不是由注册表引起。最后发现QtCreator中有无效断点（断点列表里存在断点，双击跟进断点位置不在代码处）。清空无效断点后程序运行正常。算是QtCreator的一个BUG，记录一下。</p>
<h2 id="Boost1-75版本库使用-boost-archive-xml-iarchive序列化时析构函数抛出错误"><a href="#Boost1-75版本库使用-boost-archive-xml-iarchive序列化时析构函数抛出错误" class="headerlink" title="Boost1_75版本库使用 boost::archive::xml_iarchive序列化时析构函数抛出错误"></a>Boost1_75版本库使用 boost::archive::xml_iarchive序列化时析构函数抛出错误</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">bool GetConvertData(std::list&lt;Convert::Region2d*&gt;&amp; loops, const char * szPath)
&#123;
    if (!szPath)
        return false;
    std::ifstream binary_sstream(szPath, std::ios::binary | std::ios::in);&#x2F;&#x2F;读取文件
    &quot;std::string sdd;&quot;
    if (binary_sstream.is_open()&amp;&amp; binary_sstream.good())&#x2F;&#x2F;判断文件是否打开以及是否合法
    &#123;
        boost::archive::xml_iarchive binary_oa(binary_sstream);&#x2F;&#x2F;将文件流序列化
        try
        &#123;
            ...
        &#125;
        catch (boost::archive::archive_exception const&amp; e)
        &#123;
            binary_sstream.close();
            return false;
        &#125;
        &quot;binary_sstream&gt;&gt;sdd;&quot;
        binary_sstream.close();&#x2F;&#x2F;关闭文件流
        return true;&#x2F;&#x2F;返回值，进入析构函数
        &#x2F;&#x2F;运行到这里.bin文件中的数据已经全部拿到，但是xml_iarchive析构函数抛出异常
    &#125;
    return false;
&#125;</code></pre>
<p>&emsp;&emsp;分析可能是高版本Boost库特性导致，文件流打开文件后没有调用，直接关闭后数据没有正常析构。因此导致xml_iarchive认为文件流没有正常关闭，抛出异常。添加引号中调用文件流代码后程序正常运行。   </p>
<h2 id="Qt运行提示”无法打开rc-exe”"><a href="#Qt运行提示”无法打开rc-exe”" class="headerlink" title="Qt运行提示”无法打开rc.exe”"></a>Qt运行提示”无法打开rc.exe”</h2><p><img src="%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80rc.exe.png" alt="Qt设置"></p>
<p>&emsp;&emsp;确认完整搭建好环境后，打开QtCreator，进入：工具-&gt;选项-&gt;构建和运行。取消勾选如图所示红框处即可。</p>
]]></content>
      <categories>
        <category>RobotCAM软件开发</category>
      </categories>
  </entry>
  <entry>
    <title>RobotCAM:(一)环境搭建</title>
    <url>/2021/08/01/RobotCAM-%E4%B8%80-%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;RobotCAM机器人轨迹仿真平台基于Qt5.14.2进行搭建，使用CMake进行第三方库管理。<br>&emsp;&emsp;需要安装VS2017、Qt5.14.2两个软件。<br>&emsp;&emsp;第三方库直接使用我配置好的即可。</p>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="VS2017安装"><a href="#VS2017安装" class="headerlink" title="VS2017安装"></a>VS2017安装</h3><p>&emsp;&emsp;<a href="https://msdn.itellyou.cn/">MSDN神站下载</a>，进入如图所示页面，选择VS2017任意版本进行下载（推荐安装专业版）。<br><img src="VS2017%E4%B8%8B%E8%BD%BD.jpg" alt="VS2017下载"><br>&emsp;&emsp;下载完成后，打开在线安装包（安装完成后不要删掉安装包，方便以后进行组件修改），按照如图所示配置。<br><img src="VS2017%E5%AE%89%E8%A3%85.jpg" alt="VS2017安装"></p>
<h3 id="Qt安装"><a href="#Qt安装" class="headerlink" title="Qt安装"></a>Qt安装</h3><p>&emsp;&emsp;<a href="https://www.qt.io/download">Qt官网进行下载</a>，注册一个自己的账号，点击如图所示进行Qt在线安装包下载。<br><img src="%E4%B8%8B%E8%BD%BDQt.jpg" alt="Qt下载"><br>&emsp;&emsp;Qt安装方式为在线安装，可能比较慢，耐心等待一下就好。后期修改版本或者增添新组件比较方便。<br>&emsp;&emsp;下载完成后打开Qt在线安装，按照如图所示，勾选红框处，其余保持默认。<br><img src="Qt%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE.jpg" alt="Qt安装"></p>
<h3 id="Qt运行测试"><a href="#Qt运行测试" class="headerlink" title="Qt运行测试"></a>Qt运行测试</h3><p>&emsp;&emsp;安装完VS2017和Qt5.14.2后，打开QtCreator，进入如图所示界面，搜索“sdi”案例。<br><img src="Qt%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95.jpg" alt="Qt测试"><br>&emsp;&emsp;保持默认配置，F5运行sdi案例，若能成功运行，没有报错，即完成软件安装。</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>&emsp;&emsp;在Q群中下载我提供的基本平台源码，直接解压到“D:\”，即D盘根目录下。（最好保持目录结构和图片一致）<br><img src="%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.jpg" alt="文件结构"><br>&emsp;&emsp;打开“环境变量和QT设置.txt”按照内容进行配置。</p>
<h3 id="Path设置"><a href="#Path设置" class="headerlink" title="Path设置"></a>Path设置</h3><p>&emsp;&emsp;右键“此电脑”-&gt;属性-&gt;高级系统设置-&gt;环境变量，进入如图所示页面。<br><img src="Path%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.jpg" alt="Path变量"><br>&emsp;&emsp;双击红框处，添加Path路径，将“环境变量和QT设置.txt”对应内容填入，如果路径不同，根据自己的情况修改。<br>&emsp;&emsp;配置完后如图所示。（前期入门训练只用到了VTK库，Evaluation(v1.0)没有提供其他的第三方库，可以只设置VTK的环境变量，全部设置好也没影响）<br><img src="%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE.jpg" alt="环境变量"></p>
<h2 id="软件平台运行测试"><a href="#软件平台运行测试" class="headerlink" title="软件平台运行测试"></a>软件平台运行测试</h2><p>&emsp;&emsp;做完以上所有操作后，打开QtCreator-&gt;工具-&gt;选项-&gt;构建和运行，修改为如图所示配置。<br><img src="Qt%E8%AE%BE%E7%BD%AE.jpg" alt="Qt设置"><br>&emsp;&emsp;接着点击“打开”，选择如图所示“CMakeLists.txt”文件。<br><img src="%E8%BD%AF%E4%BB%B6%E5%B9%B3%E5%8F%B0%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95.jpg" alt="运行测试"><br>&emsp;&emsp;然后F5运行，如果没有报错，且界面交互一切正常，则配置完成。（成功运行后界面如图所示）<br><img src="%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C.jpg" alt="成功运行"></p>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><p>&emsp;&emsp;1.VS2017组件安装缺失。<br>&emsp;&emsp;2.QT版本冲突导致qmake使用的是旧版本，无法匹配。<br>&emsp;&emsp;3.修改了文件名，导致CMake路径配置错误。</p>
]]></content>
      <categories>
        <category>RobotCAM软件开发</category>
      </categories>
  </entry>
  <entry>
    <title>RobotCAM:(二)CMake简单介绍</title>
    <url>/2021/08/02/RobotCAM-%E4%BA%8C-%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c51a90f0f81a082aa5ccfb002f2ea0429e9a057155c0f0b558a25a3b5f6da54f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>RobotCAM软件开发</category>
      </categories>
  </entry>
  <entry>
    <title>RobotCAM:问题记录</title>
    <url>/2021/07/31/RobotCAM-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;此贴主要记录RobotCAM软件开发过程中遇到的奇怪和难点问题。</p>
<h2 id="QtCreator-Debug模式下加载QFileDialog十分缓慢"><a href="#QtCreator-Debug模式下加载QFileDialog十分缓慢" class="headerlink" title="QtCreator Debug模式下加载QFileDialog十分缓慢"></a>QtCreator Debug模式下加载QFileDialog十分缓慢</h2><p>&emsp;&emsp;排查后发现程序没有问题、环境配置没有问题。重装VS和QT后还是无效。怀疑是注册表清理出问题，查看注册表基本确定问题不是由注册表引起。最后发现QtCreator中有无效断点（断点列表里存在断点，双击跟进断点位置不在代码处）。清空无效断点后程序运行正常。算是QtCreator的一个BUG，记录一下。</p>
<h2 id="Boost1-75版本库使用-boost-archive-xml-iarchive序列化时析构函数抛出错误"><a href="#Boost1-75版本库使用-boost-archive-xml-iarchive序列化时析构函数抛出错误" class="headerlink" title="Boost1_75版本库使用 boost::archive::xml_iarchive序列化时析构函数抛出错误"></a>Boost1_75版本库使用 boost::archive::xml_iarchive序列化时析构函数抛出错误</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">bool GetConvertData(std::list&lt;Convert::Region2d*&gt;&amp; loops, const char * szPath)
&#123;
    if (!szPath)
        return false;
    std::ifstream binary_sstream(szPath, std::ios::binary | std::ios::in);&#x2F;&#x2F;读取文件
    &quot;std::string sdd;&quot;
    if (binary_sstream.is_open()&amp;&amp; binary_sstream.good())&#x2F;&#x2F;判断文件是否打开以及是否合法
    &#123;
        boost::archive::xml_iarchive binary_oa(binary_sstream);&#x2F;&#x2F;将文件流序列化
        try
        &#123;
            ...
        &#125;
        catch (boost::archive::archive_exception const&amp; e)
        &#123;
            binary_sstream.close();
            return false;
        &#125;
        &quot;binary_sstream&gt;&gt;sdd;&quot;
        binary_sstream.close();&#x2F;&#x2F;关闭文件流
        return true;&#x2F;&#x2F;返回值，进入析构函数
        &#x2F;&#x2F;运行到这里.bin文件中的数据已经全部拿到，但是xml_iarchive析构函数抛出异常
    &#125;
    return false;
&#125;</code></pre>
<p>&emsp;&emsp;分析可能是高版本Boost库特性导致，文件流打开文件后没有调用，直接关闭后数据没有正常析构。因此导致xml_iarchive认为文件流没有正常关闭，抛出异常。添加引号中调用文件流代码后程序正常运行。   </p>
<h2 id="Qt运行提示”无法打开rc-exe”"><a href="#Qt运行提示”无法打开rc-exe”" class="headerlink" title="Qt运行提示”无法打开rc.exe”"></a>Qt运行提示”无法打开rc.exe”</h2><p><img src="%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80rc.exe.png" alt="Qt设置"></p>
<p>&emsp;&emsp;确认完整搭建好环境后，打开QtCreator，进入：工具-&gt;选项-&gt;构建和运行。取消勾选如图所示红框处即可。</p>
]]></content>
      <categories>
        <category>RobotCAM软件开发</category>
      </categories>
  </entry>
</search>
